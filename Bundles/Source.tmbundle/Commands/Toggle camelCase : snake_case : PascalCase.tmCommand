<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>changed</key>
	<dict>
		<key>command</key>
		<string>#!/usr/bin/env ruby18 -wKU
# Test Cases
# 
# AFooBar -&gt; a_foo_bar -&gt; aFooBar -&gt; AFooBar
# URLString -&gt; url_string -&gt; urlString -&gt; UrlString
# TestURLString -&gt; test_url_string -&gt; testUrlString -&gt; TestUrlString
# test -&gt; Test -&gt; test
# test_URL_STRING -&gt; testUrlString -&gt; TestUrlString -&gt; test_url_string


# HotFlamingCats -&gt; hot_flaming_cats
def pascalcase_to_snakecase(word)
	word.gsub(/\B([A-Z])(?=[a-z0-9])|([a-z0-9])([A-Z])/, '\2_\+').downcase
end

# hot_flaming_cats -&gt; hotFlamingCats
def snakecase_to_camelcase(word)
  word.gsub(/_([^_]+)/) { $1.capitalize }
end

# hotFlamingCats -&gt; HotFlamingCats
def camelcase_to_pascalcase(word)
	word.gsub(/^\w{1}/) {|c| c.upcase}
end

def toggle_case(word)
  case word
  when /^([^A-Za-z]*+)(?=[A-Z])/
    $1 + pascalcase_to_snakecase($')
  when /^([^A-Za-z]*+)(?=.+_)/
    $1 + snakecase_to_camelcase($')
  when /^([^A-Za-z]*+)(?=[a-z])/
    $1 + camelcase_to_pascalcase($')
  else
    word
  end
end

while word = $stdin.gets
  print toggle_case(word)
end
</string>
		<key>inputFormat</key>
		<string>text</string>
		<key>outputCaret</key>
		<string>heuristic</string>
		<key>outputFormat</key>
		<string>text</string>
		<key>outputLocation</key>
		<string>replaceInput</string>
		<key>version</key>
		<integer>2</integer>
	</dict>
	<key>deleted</key>
	<array>
		<string>output</string>
	</array>
	<key>isDelta</key>
	<true/>
	<key>uuid</key>
	<string>6065BB2D-242A-4C3D-B523-6F560D65AC11</string>
</dict>
</plist>
